<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.meibo.web.media.dao.BlogMediaDAO">
	
	<select id="selectBlogMediaType" resultType="java.util.Map">
		select
			id 				typeId,
			name			typeName,
			sort_index		sortIndex
		from
			media_blog_type
		where
			status = 1
		order by
			sort_index
	</select>
	
	<insert id="insertBlogMediaInfo" parameterType="blogMediaInfo">
		insert into
			media_blog_info
		( channel_id, area_id, publish_price, forward_price, remark, status, created_user )
		values
		( #{channelId}, #{areaId}, #{publishPrice}, #{forwardPrice}, #{remark}, #{status}, #{createdUser} )
	</insert>
	
	<select id="selectBlogMediaInfoById" parameterType="Integer" resultType="blogMediaInfo">
		select
			blog_media_id			blogMediaId,
			channel_id				channelId,
			area_id					areaId,
			publish_price			publishPrice,
			forward_price			forwardPrice,
			remark					remark,
			audit_user				auditUser,
			audit_status			auditStatus,
			audit_date				auditDate,
			status					status,
			created_user			createdUser
		from
			media_blog_info
		where
			blog_media_id = #{blogMediaId}
	</select>
	
	<update id="auditBlogMediaInfo" parameterType="blogMediaInfo">
		update
			media_blog_info
		set
			audit_status = #{auditStatus},
			audit_user = #{auditUser},
			audit_date = #{auditDate}
		where
			blog_media_id = #{blogMediaId}
	</update>
	
	<select id="selectBlogMediaListByAdmin" parameterType="adminBlogMediaQuery" resultType="adminBlogMediaListDto">
		select
			a.blog_media_id				blogMediaId,
			a.publish_price				publishPrice,
			a.forward_price				forwardPrice,
			a.remark					remark,
			a.audit_status				auditStatus,
			e.login_name				creator,
			b.nickname					nickname,
			b.qr_code					qrCode,
			b.head_image				headImage,
			b.register_date				registerDate,
			b.`desc`					`desc`,
			b.fans_count				fansCount,
			b.auth_type					authType,
			b.auth_info					authInfo,
			c.name						typeName,
			d.area_name					areaName,
			a.created_date				createdate
		from
			media_blog_info a,
			media_blog_channel b,
			media_blog_type c,
			system_area_info d,
			member_info e
		where
			a.channel_id = b.channel_id
		and	
			b.type_id = c.id
		and	
			d.area_id = a.area_id
		and
			a.created_user = e.member_id
		<if test="createdUser != null and '' != createdUser">
		and
			a.created_user = #{createdUser}
		</if>
		<if test="auditStatus != null">
		and
			a.audit_status = #{auditStatus}
		</if>
		<if test="mediaName != null and '' != mediaName">
		and
			b.nickname like CONCAT('%',#{mediaName},'%' )
		</if>
		order by 
			a.audit_status, a.created_date desc
		<if test="isLimit != null and isLimit == 1">
			limit #{beginLimit}, #{endLimit}
		</if>
	</select>
	
	<select id="selectBlogMediaListByAdminCount" parameterType="adminBlogMediaQuery" resultType="Integer">
		select
			count( a.blog_media_id )
		from
			media_blog_info a,
			media_blog_channel b,
			media_blog_type c,
			system_area_info d
		where
			a.channel_id = b.channel_id
		and
			b.type_id = c.id
		and
			d.area_id = a.area_id
		<if test="createdUser != null and '' != createdUser">
		and
			a.created_user = #{createdUser}
		</if>
		<if test="auditStatus != null">
		and
			a.audit_status = #{auditStatus}
		</if>
		<if test="mediaName != null and '' != mediaName">
		and
			b.nickname like CONCAT('%',#{mediaName},'%' )
		</if>
	</select>
	
	<select id="selectBlogMediaListByMember" parameterType="memberBlogMediaQuery" resultType="baseBlogMediaListDto">
		SELECT
			g.*, 
			b.nickname 				nickname,
			b.auth_type				authType,
			b.auth_info				authInfo,
			b.qr_code				qrCode,
			b.head_image			headImage,
			b.register_date			registerDate,
			c.name 					typeName,
			b.`desc`				`desc`,
			b.fans_count			fansCount,
			d.area_name				areaName
		FROM
			(
				SELECT
					a.channel_id 				channelId,
					a.blog_media_id 			blogMediaId,
				<if test="rate != null and rate != ''">
					a.publish_price + a.publish_price * #{rate} 			publishPrice,
					a.forward_price + a.forward_price * #{rate}				forwardPrice,
				</if>
				<if test="rate == null or rate == ''">
					a.publish_price 			publishPrice,
					a.forward_price				forwardPrice,
				</if>
					a.area_id 					areaId,
					a.remark 					remark,
					a.created_date				createdate
				FROM
					media_blog_info a
				LEFT JOIN media_blog_info f ON a.channel_id = f.channel_id
<![CDATA[ 			AND a.publish_price < f.publish_price	]]>	
				WHERE
					a.audit_status = 1
				GROUP BY
					a.channel_id
			) g,
			media_blog_channel b,
			media_blog_type c,
			system_area_info d
		WHERE
			g.channelId = b.channel_id
		AND b.type_id = c.id
		AND d.area_id = g.areaId
		<if test="mediaName != null and mediaName != ''">
		and
			b.nickname like CONCAT('%',#{mediaName},'%' )
		</if>
		<if test="maxPrice != null">
<![CDATA[
		and
			g.publishPrice <= #{maxPrice}
]]>	
		</if>
		<if test="minPrice != null">
<![CDATA[
		and
			g.publishPrice >= #{minPrice}
]]>	
		</if>
		<if test="maxFansCount != null">
<![CDATA[	
		and
			b.fans_count <= #{maxFansCount}
]]>		
		</if>
		<if test="minFansCount != null">
<![CDATA[	
		and
			b.fans_count >= #{minFansCount}
]]>		
		</if>
		<if test="areaId != null">
		and
			g.areaId = #{areaId}
		</if>
		<if test="typeId != null">
		and
			b.type_id = #{typeId}
		</if>
		ORDER BY g.createdate desc
		<if test="isLimit != null and isLimit == 1">
			limit #{beginLimit}, #{endLimit}
		</if>
	</select>
	
	<select id="selectBlogMediaListByMemberCount" parameterType="memberBlogMediaQuery" resultType="Integer">
		SELECT
			count( g.blogMediaId )
		FROM
			(
				SELECT
					a.channel_id 				channelId,
					a.blog_media_id 			blogMediaId,
					a.publish_price 			publishPrice,
					a.forward_price				forwardPrice,
					a.area_id 					areaId,
					a.remark 					remark
				FROM
					media_blog_info a
				LEFT JOIN media_blog_info f ON a.channel_id = f.channel_id
<![CDATA[ 			AND a.publish_price < f.publish_price	]]>	
				WHERE
					a.audit_status = 1
				GROUP BY
					a.channel_id
			) g,
			media_blog_channel b,
			media_blog_type c,
			system_area_info d
		WHERE
			g.channelId = b.channel_id
		AND b.type_id = c.id
		AND d.area_id = g.areaId
		<if test="mediaName != null and mediaName != ''">
		and
			b.nickname like CONCAT('%',#{mediaName},'%' )
		</if>
		<if test="maxPrice != null">
<![CDATA[
		and
			g.publishPrice <= #{maxPrice}
]]>	
		</if>
		<if test="minPrice != null">
<![CDATA[
		and
			g.publishPrice >= #{minPrice}
]]>	
		</if>
		<if test="maxFansCount != null">
<![CDATA[	
		and
			b.fans_count <= #{maxFansCount}
]]>		
		</if>
		<if test="minFansCount != null">
<![CDATA[	
		and
			b.fans_count >= #{minFansCount}
]]>		
		</if>
		<if test="areaId != null">
		and
			g.areaId = #{areaId}
		</if>
		<if test="typeId != null">
		and
			b.type_id = #{typeId}
		</if>
	</select>
	
	<update id="updateBlogMediaInfo" parameterType="blogMediaUpdate">
		update
			media_blog_info
		<set>
			<if test="channelId != null">channel_id = #{channelId},</if>
			<if test="areaId != null">area_id = #{areaId},</if>
			<if test="publishPrice != null">publish_price = #{publishPrice},</if>
			<if test="forwardPrice != null">forward_price = #{forwardPrice},</if>
			<if test="remark != null">remark = #{remark}</if>
		</set>
		where
			blog_media_id = #{blogMediaId}
	</update>
	
	<select id="selectBlogMediaAreaList" resultType="java.util.Map">
		SELECT
			t.area_id areaId,
			a.area_name areaName
		FROM
			media_blog_info t
		INNER JOIN system_area_info a ON a.area_id = t.area_id
		WHERE
			t.audit_status = 1
		GROUP BY
			t.area_id
	</select>
	
   
</mapper>